name: Continuous Integration

on:
  push:
    branches:
      - "**"
    paths-ignore:
      - "docs/**"
      - "**/*.md"
      - ".github/workflows/mutation-testing.yml"
      - "stryker.conf.json"
  pull_request:
    branches:
      - "main"
    paths-ignore:
      - "docs/**"
      - "**/*.md"
      - ".github/workflows/mutation-testing.yml"
  workflow_dispatch:

env:
  DOTNET_NOLOGO: 1 # Disable the .NET welcome message
  DOTNET_CLI_TELEMETRY_OPTOUT: 1 # Opt out of the .NET SDK telemetry feature

jobs:
  build-and-test:
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Setup .NET [v7.0.x]
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            7.0.x

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache NuGet packages
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Show docker-compose version
        run: |
          docker-compose version

      - name: Start MongoDB Container
        working-directory: ./IntegrationTest.Infra.MongoDB
        run: docker-compose up -d

      - name: Resolve dependencies
        run: dotnet restore --force --no-cache

      - name: Hack [issue "MSB3026 Unable to copy file" for EmbeddedResources]
        run: |
          mkdir -p IntegrationTest.EntryPoint.WebApi/bin/Debug/net7.0/pt-br 
          mkdir -p IntegrationTest.EntryPoint.WebApi/bin/Debug/net7.0/en-us
          mkdir -p IntegrationTest.EntryPoint.WebApi/bin/Release/net7.0/pt-br 
          mkdir -p IntegrationTest.EntryPoint.WebApi/bin/Release/net7.0/en-us

      - name: Build in Debug Mode
        run: dotnet build --configuration Debug --no-restore

      - name: Test [Core]
        run: dotnet test ./UnitTest.Core/UnitTest.Core.csproj --configuration Debug --no-build --nologo -v n

      - name: Test [EntryPoint.WebApi]
        run: dotnet test ./IntegrationTest.EntryPoint.WebApi/IntegrationTest.EntryPoint.WebApi.csproj --configuration Debug --no-build --nologo -v n

      - name: Test [Infra.MongoDB]
        run: dotnet test ./IntegrationTest.Infra.MongoDB/IntegrationTest.Infra.MongoDB.csproj --configuration Debug --no-build --nologo -v n

      - name: Environment Teardown
        if: always()
        run: |
          docker-compose down -v --remove-orphans
          echo "Environment Teardown"

  run-sonar:
    if: false
    needs: build-and-test
    uses: ./.github/workflows/sonar-analysis.yml
    secrets:
      githubToken: ${{ secrets.GITHUB_TOKEN }}
      sonarToken: ${{ secrets.SONAR_TOKEN }}

  setup-vars:
    # needs: run-sonar
    runs-on: ubuntu-latest
    outputs:
      APP_VERSION: "v1.0.0"
      DOCKER_REGISTRY: docker.io
      ARTIFACT_NAME: properties-api
      PROJECT_ID: duckhome-firebase
      SERVICE_NAME: properties-api-service
      CLOUD_REGION: southamerica-east1-a

    steps:
      - run: |
          echo "Setting up environment variables"

  generate-artifact:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: setup-vars
    runs-on: ubuntu-latest
    env:
      APP_VERSION: ${{ needs.setup-vars.outputs.APP_VERSION }}
      DOCKER_REGISTRY: ${{ needs.setup-vars.outputs.DOCKER_REGISTRY }}
      ARTIFACT_NAME: ${{ needs.setup-vars.outputs.ARTIFACT_NAME }}
      PROJECT_ID: ${{ needs.setup-vars.outputs.PROJECT_ID }}
    outputs:
      RELEASE_VERSION: ${{ steps.create_release.outputs.RELEASE_VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create Tag from Date and Run Number
        id: tag
        run: |
          echo "TAG=$(TZ='America/Sao_Paulo' date +'%y%m%d')${{ github.run_number }}" >> $GITHUB_ENV
          echo "TAG=${{ env.TAG }}"

      - name: Create Release Version from App Version and Tag
        id: create_release
        env:
          APP_VERSION: ${{ env.APP_VERSION }}
          TAG: ${{ env.TAG }}
        run: |
          echo "RELEASE_VERSION=${{ env.APP_VERSION }}-${{ env.TAG }}" >> $GITHUB_ENV
          echo "::set-output name=RELEASE_VERSION::${{ env.RELEASE_VERSION }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.ARTIFACT_NAME }}:${{ env.RELEASE_VERSION }}

      - name: Environment Teardown
        if: always()
        run: |
          docker logout ${{ env.DOCKER_REGISTRY }}
          echo "Environment Teardown"

  deploy-to-gcp-cloud-run:
    if: ${{ github.ref == 'refs/heads/main' }}
    needs:
      - setup-vars
      - generate-artifact
    runs-on: ubuntu-latest
    env:
      ARTIFACT_NAME: ${{ needs.setup-vars.outputs.ARTIFACT_NAME }}
      PROJECT_ID: ${{ needs.setup-vars.outputs.PROJECT_ID }}
      SERVICE_NAME: ${{ needs.setup-vars.outputs.SERVICE_NAME }}
      CLOUD_REGION: ${{ needs.setup-vars.outputs.CLOUD_REGION }}
      RELEASE_VERSION: ${{ needs.generate-artifact.outputs.RELEASE_VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Google Cloud Authentication
        uses: google-github-actions/auth@v1.1.1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Deploy to Google Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1.0.2
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.ARTIFACT_NAME }}:${{ env.RELEASE_VERSION }}
          project_id: ${{ env.PROJECT_ID }}
          region: ${{ env.CLOUD_REGION }}
